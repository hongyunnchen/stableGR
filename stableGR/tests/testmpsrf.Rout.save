
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(10)
> library(mvtnorm)
Warning message:
package 'mvtnorm' was built under R version 3.5.2 
> library(mcmcse)
mcmcse: Monte Carlo Standard Errors for MCMC
Version 1.3-4 created on 2019-12-23.
copyright (c) 2012, James M. Flegal, University of California, Riverside
                    John Hughes, University of Colorado, Denver
                    Dootika Vats, University of Warwick
                    Ning Dai, University of Minnesota
 For citation information, type citation("mcmcse").
 Type help("mcmcse-package") to get started.

> library(stableGR)
> 
> ################ 
> # Start by making a few chains to work with
> 
> # Details on the chain construction
> p <- 5
> N <- 10000
> tail.ind <- floor(N*.80):N
> foo <- matrix(.50, nrow=p, ncol=p)
> sigma <- foo^(abs(col(foo)-row(foo)))
> mu <- sample(10:20, p)
> mu2 <- mu[p]
> 
> # Create the chains
> mvn.gibbs <- stableGR:::mvn.gibbs
> out.gibbs1 <- mvn.gibbs(N = N, mu = mu, sigma = sigma, p = p)
> out.gibbs2 <- mvn.gibbs(N = N, mu = mu, sigma = sigma, p = p)
> 
> obj <- list(out.gibbs1, out.gibbs2)
> 
> ################ 
> # Perform unit test using the two chains in obj
> 
> outwithfun <- stable.GR(obj, blather = TRUE, size = "sqroot")
> withfun <- outwithfun$mpsrf
> blather <- outwithfun$blather
> 
> # Calculate Tmat for each chain
> stacked <- rbind(out.gibbs1, out.gibbs2)
> That <- mcse.multi(stacked, method = "lug", size = sqrt(N))$cov
> Tmat1 <- mcse.multi(out.gibbs1, method = "lug", size = "sqroot")$cov
> #Tmat2 <- mcse.multi(out.gibbs2, method = "lug")$cov
> #That <- .5*(Tmat1 + Tmat2) 
> all.equal(That, blather$AsymVarMatrix)
[1] TRUE
> 
> #Calc Smat
> cov1 <- var(out.gibbs1)
> cov2 <- var(out.gibbs2)
> Smat <- .5*(cov1 + cov2) 
> all.equal(Smat, blather$S)
[1] TRUE
> 
> #calculate determinants
> #Teigen <- eigen(That)$values
> #Seigen <- eigen(Smat)$values
> #detT <- (prod(Teigen))
> #detS <- (prod(Seigen))
> detratio <- det(That)/det(Smat) 
> all.equal(detratio, det(solve(blather$S, blather$AsymVarMatrix)))
[1] TRUE
> 
> Nchain <- length(obj)
> all.equal(2, Nchain)
[1] TRUE
> 
> top <- (N-1) + ((detratio)^(1/p))
> byhand <- sqrt(top/N)
> 
> all.equal(byhand, withfun)
[1] TRUE
> 
> ################ ################ ################
> # Perform unit test using a SINGLE chain (just in case)
> onechain <- list(out.gibbs1)
> withfun <- stable.GR(onechain, size = "sqroot")$mpsrf
> 
> #calculate determinants
> Teigen <- eigen(Tmat1)$values
> Seigen <- eigen(cov1)$values
> detT <- (prod(Teigen))
> detS <- (prod(Seigen))
> detratio <- detT/detS #good
> 
> Nchain <- length(onechain)
> all.equal(1, Nchain)
[1] TRUE
> 
> rhat <- (N-1)/N + ((detratio)^(1/p))/N
> byhand <- sqrt(rhat)
> all.equal(byhand, withfun)
[1] TRUE
> 
> 
> proc.time()
   user  system elapsed 
   9.82    0.20   10.03 
