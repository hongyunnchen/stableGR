
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(10)
> library(mvtnorm)
> library(mcmcse)
mcmcse: Monte Carlo Standard Errors for MCMC
Version 1.3-2 created on 2017-07-03.
copyright (c) 2012, James M. Flegal, University of California, Riverside
                    John Hughes, University of Colorado, Denver
                    Dootika Vats, University of Warwick
                    Ning Dai, University of Minnesota
 For citation information, type citation("mcmcse").
 Type help("mcmcse-package") to get started.

> library(coda)
> library(mcmcdiag)
> 
> ################ 
> # Start by making a few chains to work with
> 
> # Details on the chain construction
> p <- 5
> N <- 100
> tail.ind <- floor(N*.80):N
> foo <- matrix(.50, nrow=p, ncol=p)
> sigma <- foo^(abs(col(foo)-row(foo)))
> mu <- sample(10:20, p)
> mu2 <- mu[p]
> 
> # Create the chains
> mvn_gibbs <- mcmcdiag:::mvn_gibbs
> out.gibbs1 <- mvn_gibbs(N = N, mu = mu, sigma = sigma, p = p)
> out.gibbs2 <- mvn_gibbs(N = N, mu = mu, sigma = sigma, p = p)
> 
> # Convert to MCMC objects
> out1 <- mcmc(out.gibbs1)
> out2 <- mcmc(out.gibbs2)
> obj <- mcmc.list(out1, out2)
> 
> ################ 
> # Perform unit test using the two chains in obj
> 
> (withfun <- gelman.bm(obj)$mpsrf)
[1] 1.013251
> 
> 
> # Calculate Tmat for each chain
> (Tmat1 <- mcse.multi(out1)$cov*N)
         [,1]     [,2]     [,3]     [,4]     [,5]
[1,] 393.1615 308.9774 481.5531 505.0575 474.0111
[2,] 308.9774 567.9977 615.5139 486.8168 421.9237
[3,] 481.5531 615.5139 828.0292 746.5686 662.8091
[4,] 505.0575 486.8168 746.5686 853.3979 765.5314
[5,] 474.0111 421.9237 662.8091 765.5314 707.4915
> (Tmat2 <- mcse.multi(out2)$cov*N)
         [,1]     [,2]     [,3]     [,4]     [,5]
[1,] 278.4123 147.1638 251.7276 345.3939 322.2515
[2,] 147.1638 121.5168 188.5352 241.6210 193.9184
[3,] 251.7276 188.5352 464.5511 573.7407 511.0837
[4,] 345.3939 241.6210 573.7407 744.9463 686.9830
[5,] 322.2515 193.9184 511.0837 686.9830 694.1361
> (That <- .5*(Tmat1 + Tmat2)) #good
         [,1]     [,2]     [,3]     [,4]     [,5]
[1,] 335.7869 228.0706 366.6403 425.2257 398.1313
[2,] 228.0706 344.7572 402.0246 364.2189 307.9210
[3,] 366.6403 402.0246 646.2901 660.1547 586.9464
[4,] 425.2257 364.2189 660.1547 799.1721 726.2572
[5,] 398.1313 307.9210 586.9464 726.2572 700.8138
> 
> #Calc Smat
> cov1 <- var(out1)
> cov2 <- var(out2)
> (Smat <- .5*(cov1 + cov2)) #good
         [,1]     [,2]     [,3]     [,4]     [,5]
[1,] 3.345112 2.525048 3.140874 3.138200 1.652262
[2,] 2.525048 2.824435 3.058963 2.828375 1.518839
[3,] 3.140874 3.058963 4.647584 4.425101 2.262446
[4,] 3.138200 2.828375 4.425101 5.267420 3.015366
[5,] 1.652262 1.518839 2.262446 3.015366 3.033524
> 
> #calculate determinants
> (Teigen <- eigen(That)$values)
[1] 2484.57060  203.65213   93.26174   28.53047   16.80517
> (Seigen <- eigen(Smat)$values)
[1] 15.4029187  1.9421681  0.9047426  0.5909306  0.2773166
> detT <- (prod(Teigen))^(1/p)
> detS <- (prod(Seigen))^(1/p)
> detratio <- detT/detS #good
> 
> Nchain <- nchain(obj)
> all.equal(2, Nchain)
[1] TRUE
> 
> rhat <- (N-1)/N + (Nchain +1)/(Nchain * N) *(detratio)^(1/p)
> rhat
[1] 1.026677
> 
> byhand <- sqrt(rhat)
> byhand
[1] 1.013251
> 
> all.equal(byhand, withfun)
[1] TRUE
> 
> ################ ################ ################
> # Perform unit test using a SINGLE chain (just in case)
> onechain <- mcmc.list(out1)
> (withfun <- gelman.bm(onechain)$mpsrf)
[1] 1.018694
> 
> #calculate determinants
> (Teigen <- eigen(Tmat1)$values)
[1] 2943.510194  298.039365   71.460695   29.055929    8.011478
> (Seigen <- eigen(cov1)$values)
[1] 16.2237863  1.9864059  0.8914145  0.6876928  0.2646439
> detT <- (prod(Teigen))^(1/p)
> detS <- (prod(Seigen))^(1/p)
> detratio <- detT/detS #good
> 
> Nchain <- nchain(onechain)
> all.equal(1, Nchain)
[1] TRUE
> 
> rhat <- (N-1)/N + (Nchain +1)/(Nchain * N) *(detratio)^(1/p)
> rhat
[1] 1.037738
> 
> byhand <- sqrt(rhat)
> byhand
[1] 1.018694
> 
> all.equal(byhand, withfun)
[1] TRUE
> 
> 
> proc.time()
   user  system elapsed 
  0.796   0.036   0.837 
